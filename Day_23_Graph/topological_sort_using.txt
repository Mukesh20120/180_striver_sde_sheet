#include <bits/stdc++.h> 
void dfs(int node,vector<int>adj[],vector<int>&visited,stack<int>&st){
    visited[node]=1;
     for(auto it: adj[node])
         if(visited[it]==0)
             dfs(it,adj,visited,st);
    st.push(node);
}
vector<int> topologicalSort(vector<vector<int>> &edges, int v, int e)  {
    //we use stack to store the element and the visited array to mark the element visited
    stack<int>st;
    vector<int>visited(v,0);
    vector<int>adj[v];
    //unordered_map<int,vector<int>>adj;
    for(int i=0;i<e;i++){
        adj[edges[i][0]].push_back(edges[i][1]);
    }
    
    for(int i=0;i<v;i++){
        if(visited[i]==0)
            dfs(i,adj,visited,st);
    }
    vector<int>topo;
    while(!st.empty()){
     topo.push_back(st.top());
        st.pop();
    }
   
    return topo;
}